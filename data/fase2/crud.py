import oracledb
from datetime import datetime
import pandas as pd

# Conexão com o banco Oracle
def conectar():
    return oracledb.connect(user="RM559451", password="fiap24", dsn="oracle.fiap.com.br:1521/orcl")

# Inicializa tabelas (executar uma única vez manualmente)
def inicializar_db():
    conn = conectar()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            CREATE TABLE PAVILHAO (
                ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                NOME VARCHAR2(100),
                ATIVO CHAR(1) DEFAULT 'S'
            )
        """)
    except oracledb.DatabaseError as e:
        if "ORA-00955" not in str(e):
            raise

    try:
        cursor.execute("""
            CREATE TABLE ESTOQUE (
                ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                PAVILHAO_ID NUMBER,
                TIPO_GRAO VARCHAR2(100),
                QUANTIDADE NUMBER,
                DATA_MOV DATE,
                TIPO_MOV CHAR(1),
                FOREIGN KEY (PAVILHAO_ID) REFERENCES PAVILHAO(ID)
            )
        """)
    except oracledb.DatabaseError as e:
        if "ORA-00955" not in str(e):
            raise

    conn.commit()
    cursor.close()
    conn.close()

# Cadastro de pavilhão
def cadastrar_pavilhao(nome):
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO PAVILHAO (NOME) VALUES (:1)", (nome,))
    conn.commit()
    cursor.close()
    conn.close()

# Listagem de pavilhões ativos
def listar_pavilhoes_ativos():
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("SELECT ID, NOME FROM PAVILHAO WHERE ATIVO = 'S'")
    ativos = cursor.fetchall()
    cursor.close()
    conn.close()
    return ativos

# Inativa pavilhão
def inativar_pavilhao(pavilhao_id):
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("UPDATE PAVILHAO SET ATIVO = 'N' WHERE ID = :1", (pavilhao_id,))
    conn.commit()
    cursor.close()
    conn.close()

# Registrar movimentação de estoque
def registrar_movimentacao(pavilhao_id, tipo_grao, quantidade, tipo_mov):
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO ESTOQUE (PAVILHAO_ID, TIPO_GRAO, QUANTIDADE, DATA_MOV, TIPO_MOV)
        VALUES (:1, :2, :3, :4, :5)
    """, (pavilhao_id, tipo_grao, quantidade, datetime.now(), tipo_mov))
    conn.commit()
    cursor.close()
    conn.close()

# Consulta estoque atual consolidado
def consultar_estoque_atual():
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT P.NOME, E.TIPO_GRAO,
               SUM(CASE WHEN E.TIPO_MOV = 'E' THEN E.QUANTIDADE ELSE -E.QUANTIDADE END) AS QUANTIDADE_ATUAL
        FROM ESTOQUE E
        JOIN PAVILHAO P ON P.ID = E.PAVILHAO_ID
        GROUP BY P.NOME, E.TIPO_GRAO
        ORDER BY P.NOME
    """)
    dados = cursor.fetchall()
    cursor.close()
    conn.close()
    return pd.DataFrame(dados, columns=["Pavilhão", "Tipo de Grão", "Quantidade Atual"])
